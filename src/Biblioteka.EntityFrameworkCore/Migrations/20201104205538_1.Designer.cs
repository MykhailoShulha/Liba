// <auto-generated />
using System;
using Biblioteka.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Biblioteka.Migrations
{
    [DbContext(typeof(BibliotekaDbContext))]
    [Migration("20201104205538_1")]
    partial class _1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Biblioteka.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Authors")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("BlogId")
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Sourse")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Biblioteka.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Authors")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("Biblioteka.CodeSnippet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Authors")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Sourse")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("CodeSnippets");
                });

            modelBuilder.Entity("Biblioteka.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Authors")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<byte[]>("Content")
                        .HasColumnType("longblob");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Biblioteka.Videocourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Videocourses");
                });

            modelBuilder.Entity("Biblioteka.Article", b =>
                {
                    b.HasOne("Biblioteka.Blog", "Blog")
                        .WithMany("Articles")
                        .HasForeignKey("BlogId");
                });

            modelBuilder.Entity("Biblioteka.Models.Book", b =>
                {
                    b.OwnsOne("Biblioteka.Shared.BookPublisher", "Publisher", b1 =>
                        {
                            b1.Property<int>("BookId")
                                .HasColumnType("int");

                            b1.Property<string>("Contacts")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("Name")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.HasKey("BookId");

                            b1.ToTable("BookPublishers");

                            b1.WithOwner()
                                .HasForeignKey("BookId");
                        });
                });

            modelBuilder.Entity("Biblioteka.Videocourse", b =>
                {
                    b.OwnsMany("Biblioteka.MyFileInfo", "Series", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<DateTime>("CreationTime")
                                .HasColumnType("datetime(6)");

                            b1.Property<string>("Extension")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("FullPath")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<DateTime>("LastAccessTime")
                                .HasColumnType("datetime(6)");

                            b1.Property<long>("Length")
                                .HasColumnType("bigint");

                            b1.Property<string>("Name")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<int>("VideocourseId")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("VideocourseId");

                            b1.ToTable("MyFileInfo");

                            b1.WithOwner()
                                .HasForeignKey("VideocourseId");

                            b1.OwnsOne("Biblioteka.Webinar", "Webinar", b2 =>
                                {
                                    b2.Property<int>("MyFileInfoId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .HasColumnType("int");

                                    b2.Property<string>("Name")
                                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                                    b2.Property<string>("Source")
                                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                                    b2.HasKey("MyFileInfoId");

                                    b2.ToTable("Webinars");

                                    b2.WithOwner()
                                        .HasForeignKey("MyFileInfoId");
                                });
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
